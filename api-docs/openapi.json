{
  "openapi": "3.0.3",
  "info": {
    "title": "MKHttpServer API",
    "description": "API for interacting with the MKHttpServer, a NanoHTTPD-based server running on Android devices for file management, server discovery, and system statistics.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://{host}:1280/server",
      "description": "Local MKHttpServer instance",
      "variables": {
        "host": {
          "default": "localhost",
          "description": "IP address or hostname of the server (discovered via broadcast)"
        }
      }
    }
  ],
  "paths": {
    "/status": {
      "get": {
        "summary": "Check server status",
        "description": "Returns whether the server is alive.",
        "responses": {
          "200": {
            "description": "Server is alive",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/name": {
      "get": {
        "summary": "Get file name by ID",
        "description": "Retrieves the name of a file given its ID.",
        "parameters": [
          {
            "name": "fileId",
            "in": "query",
            "required": true,
            "description": "The ID of the file",
            "schema": {
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File name retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileNameResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing fileId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/files": {
      "get": {
        "summary": "List paginated file metadata",
        "description": "Retrieves a paginated list of file metadata.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number (defaults to 1)",
            "schema": {
              "type": "integer",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated file metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFilesResponse"
                }
              }
            }
          },
          "404": {
            "description": "No files found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/file": {
      "get": {
        "summary": "Stream a file",
        "description": "Streams a file by its ID.",
        "parameters": [
          {
            "name": "fileId",
            "in": "query",
            "required": true,
            "description": "The ID of the file to stream",
            "schema": {
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File stream",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid fileId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Upload a file",
        "description": "Uploads a file to the server with multipart/form-data.",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file to upload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., no boundary in headers)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "507": {
            "description": "Insufficient storage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/thumbnail": {
      "get": {
        "summary": "Get file thumbnail",
        "description": "Retrieves the thumbnail data for a file by ID.",
        "parameters": [
          {
            "name": "fileId",
            "in": "query",
            "required": true,
            "description": "The ID of the file",
            "schema": {
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Thumbnail data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThumbnailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid fileId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Upload thumbnail",
        "description": "Uploads or updates thumbnail data for a file.",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "postData": {
                    "type": "string",
                    "description": "Thumbnail data (e.g., base64-encoded image)"
                  }
                },
                "required": ["postData"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Thumbnail uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThumbnailPostResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/performers": {
      "get": {
        "summary": "Get all performers",
        "operationId": "getPerformers",
        "tags": ["Performers"],
        "responses": {
          "200": {
            "description": "List of performers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add performers",
        "operationId": "addPerformers",
        "tags": [
          "Performers"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "names": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of performer names to add"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully added performers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, missing or invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, missing or invalid authorization token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{"BearerAuth": []}]
      }
    },
    "/login": {
      "post": {
        "summary": "User login",
        "description": "Authenticates a user and returns a JWT token for subsequent authenticated requests.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful, JWT token returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request (e.g., missing or malformed credentials)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed (e.g., incorrect username or password)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/servers": {
      "get": {
        "summary": "List active servers",
        "description": "Returns a list of IP addresses of active servers discovered via UDP broadcast.",
        "responses": {
          "200": {
            "description": "List of active servers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveServersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/stats": {
      "get": {
        "summary": "Get system statistics",
        "description": "Returns storage, file count, and battery statistics.",
        "responses": {
          "200": {
            "description": "System statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/scan": {
      "post": {
        "summary": "Scan storage for files",
        "description": "Scans internal and external storage for files and updates the database.",
        "responses": {
          "200": {
            "description": "Scan results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScanResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cleanup": {
      "delete": {
        "summary": "Remove absent file entries",
        "description": "Cleans up database entries for files that no longer exist.",
        "responses": {
          "200": {
            "description": "Cleanup successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CleanupResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "LoginRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The user's username",
            "example": "johndoe"
          },
          "password": {
            "type": "string",
            "description": "The user's password",
            "example": "secret123",
            "format": "password"
          }
        },
        "required": ["username", "password"]
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token for authenticated requests",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "expiresIn": {
            "type": "integer",
            "description": "Token expiration time in seconds",
            "example": 3600
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Login successful"
          }
        },
        "required": ["token", "message"]
      },
      "StatusResponse": {
        "type": "object",
        "properties": {
          "alive": {
            "type": "boolean",
            "description": "Indicates if the server is running"
          }
        },
        "required": ["alive"]
      },
      "FileNameResponse": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "description": "Name of the file"
          }
        },
        "required": ["fileName"]
      },
      "PaginatedFilesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileMetaSimplified"
            }
          },
          "meta": {
            "type": "object",
            "properties": {
              "page": {
                "type": "integer",
                "description": "Current page number"
              },
              "limit": {
                "type": "integer",
                "description": "Number of items per page"
              },
              "total": {
                "type": "integer",
                "description": "Total number of files"
              }
            },
            "required": ["page", "limit", "total"]
          }
        },
        "required": ["data", "meta"]
      },
      "FileMetaSimplified": {
        "type": "object",
        "properties": {
          "fileId": {
            "type": "integer",
            "format": "int64"
          },
          "fileName": {
            "type": "string"
          }
        },
        "required": ["fileId", "fileName"]
      },
      "ThumbnailResponse": {
        "type": "object",
        "properties": {
          "imageData": {
            "type": "string",
            "description": "Thumbnail data (e.g., base64-encoded image)"
          },
          "exists": {
            "type": "boolean",
            "description": "Whether the thumbnail exists"
          }
        },
        "required": ["imageData", "exists"]
      },
      "ThumbnailPostResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message"
          },
          "fileId": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the file associated with the thumbnail"
          }
        },
        "required": ["message", "fileId"]
      },
      "ActiveServersResponse": {
        "type": "object",
        "properties": {
          "activeServers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "IP address of an active server"
            }
          }
        },
        "required": ["activeServers"]
      },
      "StatsResponse": {
        "type": "object",
        "properties": {
          "files": {
            "type": "integer",
            "description": "Total number of files in the database"
          },
          "freeInternal": {
            "type": "integer",
            "format": "int64",
            "description": "Free internal storage in bytes"
          },
          "totalInternal": {
            "type": "integer",
            "format": "int64",
            "description": "Total internal storage in bytes"
          },
          "freeExternal": {
            "type": "integer",
            "format": "int64",
            "description": "Free external storage in bytes"
          },
          "totalExternal": {
            "type": "integer",
            "format": "int64",
            "description": "Total external storage in bytes"
          },
          "hasExternalStorage": {
            "type": "boolean",
            "description": "Whether external storage is available"
          },
          "percentage": {
            "type": "integer",
            "description": "Battery percentage (-1 if unavailable)"
          },
          "charging": {
            "type": "boolean",
            "description": "Whether the device is charging"
          }
        },
        "required": [
          "files",
          "freeInternal",
          "totalInternal",
          "freeExternal",
          "totalExternal",
          "hasExternalStorage",
          "percentage",
          "charging"
        ]
      },
      "ScanResponse": {
        "type": "object",
        "properties": {
          "insertions_attempted": {
            "type": "integer",
            "description": "Number of files attempted to insert"
          },
          "not_inserted": {
            "type": "integer",
            "description": "Number of files not inserted"
          },
          "inserted": {
            "type": "integer",
            "description": "Number of files successfully inserted"
          }
        },
        "required": ["insertions_attempted", "not_inserted", "inserted"]
      },
      "CleanupResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Cleanup success message"
          },
          "rows_deleted": {
            "type": "integer",
            "description": "Number of database rows removed"
          }
        },
        "required": ["message", "rows_deleted"]
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message"
          }
        },
        "required": ["message"]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "error": {
            "type": "string",
            "description": "Detailed error information (e.g., stack trace)",
            "nullable": true
          },
          "stackTrace": {
            "type": "string",
            "description": "Stack trace of the exception (if applicable)",
            "nullable": true
          }
        },
        "required": ["message"]
      },
      "Performer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "EntityResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "token obtained from the /login endpoint"
      }
    }
  }
}